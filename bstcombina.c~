//To determine the no. of BST generated by a given set of numbers.
#include<stdio.h>
#include<stdlib.h>
struct node
{
 int info;
 struct node *llink,*rlink;
};
typedef struct node *NODE;
NODE R=NULL;
void swap (int *x, int *y)
{
 int temp;
 temp = *x;
 *x = *y;
 *y = temp;
}
NODE getNode()
{
 NODE N;
 N=(NODE)malloc(sizeof(struct node));
 if(N==NULL)
 {
  printf("\n No memory ");
  exit(0);
 }
 N->llink=N->rlink=NULL;
 return N;
}
//Function to insert into a BST.
NODE Insert(NODE R,int item)
{
 NODE NN;
 NN=getNode();
 NN->info=item;
 if(R==NULL)
 {
  return NN;
 }
 if(NN->info<R->info)
 {
  if(R->llink==NULL)
   R->llink=NN;
  else Insert(R->llink,NN->info);
 }
 if(NN->info>R->info)
 {
  if(R->rlink==NULL)
   R->rlink=NN;
  else Insert(R->rlink,NN->info);
 }
 return R;
}
void Preorder(NODE R)
{
 if(R==NULL) return;
 printf(" %d\t ",R->info);
 Preorder(R->llink);
 Preorder(R->rlink);
}
void Print(int *a,int n)
{
 int i;
 for(i=0;i<=n;i++)
 {
  R=Insert(R,a[i]);
 }
 Preorder(R);
 printf("\n");
 free(R);
}
//this function generates different permutations for a given set of numbers.
void permute(int *a, int i, int n)
{
 int j;
 if (i == n)
  Print(a,n);
 else
 {
  for (j = i; j <= n; j++)
  {
   swap((a+i),(a+j));
   permute(a, i+1, n);
   swap((a+i),(a+j));
  }
 }
}
int main()
{
 int n,a[20],i,l;
 printf("Enter the no. of items\n");
 scanf("%d",&n);
 printf("Enter the numbers for which different combinations of binary search trees is to be generated\n");
 for(i=0;i<n;i++)
 {
     scanf("%d",&a[i]);
 }
 permute(a, 0, (n-1));
}
